-- vim: set filetype=lua:
-- ANSIBLE-MANAGED CONFIGURATION FILE
-- Upstream Refs: https://wezfurlong.org/wezterm/config/lua/general.html

local wezterm = require "wezterm"
local act = wezterm.action

-----------------------------------------------------------------------------
-- TAB-BAR "STATUS-LINE" AREAS
-----------------------------------------------------------------------------

wezterm.on('update-status', function(window, pane)
  -- get the pane working dir and hostname
  local cwd = 'none'
  local full_hostname = ''
  local cwd_uri = pane:get_current_working_dir()
  if cwd_uri then
    cwd_uri = cwd_uri:sub(8);
    local slash = cwd_uri:find('/')
    if slash then
      full_hostname = cwd_uri:sub(1, slash-1)
      cwd = cwd_uri:sub(slash)
    end
  end

  -- set the current git branch, or empty string if not in git repo
  local success, stdout, stderr = wezterm.run_child_process { '{{ tab_bar_get_git_branch_cmd }}', cwd }
  local git_branch = ''
  if success then
    git_branch = ' ' .. '{{ vcs_tree_icon }}' .. ' ' .. stdout .. ' '
  end

  -- set the user_at_host text
  local home_dir_path = wezterm.home_dir
  local user_login_name = home_dir_path:match('/%w+$')
  user_login_name = user_login_name:sub(2)
  user_at_host = ' ' .. user_login_name .. '@' .. full_hostname

  -- print and style git branch in left side of tab-bar (just left of tabs)
  window:set_left_status(wezterm.format {
    { Foreground = { Color = '{{ wezterm_term_colors.status_vcs_branch.fg_text }}' } },
    { Background = { Color = '{{ wezterm_term_colors.status_vcs_branch.bg }}' } },
    { Attribute = { Intensity = 'Bold' } },
    { Text = git_branch },
    'ResetAttributes',
  })

  -- print and style user@full_hostname in right side of tab-bar
  window:set_right_status(wezterm.format {
    { Foreground = { Color = '{{ wezterm_term_colors.status_user_at_host.fg_text }}' } },
    { Background = { Color = '{{ wezterm_term_colors.status_user_at_host.bg }}' } },
    { Attribute = { Intensity = 'Bold' } },
    { Text = user_at_host },
    'ResetAttributes',
  })
end)

-- tab-title: make sure last char and first char in printed title are spaces
wezterm.on('format-tab-title', function(tab, tabs, panes, config, hover, max_width)
 local title = wezterm.truncate_right(tab.active_pane.title, max_width - 2)
 return ' ' .. title .. ' '
end)

return {

  -----------------------------------------------------------------------------
  -- CMD / SHELL
  -----------------------------------------------------------------------------

  default_prog = { '{{ shell_cmd }}' },

  -----------------------------------------------------------------------------
  -- GRAPHICS
  -----------------------------------------------------------------------------

  front_end = '{{ graphics_rendering_method }}',
  animation_fps = {{ animation_fps_for_ease_effects }},

  -----------------------------------------------------------------------------
  -- FONTS
  -----------------------------------------------------------------------------

  font = wezterm.font '{{ font_family }}',
  font_size = {{ font_size }},
  adjust_window_size_when_changing_font_size = {{ adj_window_size_on_font_size_change }},
  allow_square_glyphs_to_overflow_width = '{{ large_glyphs_can_take_up_two_cells }}',
  text_blink_rate = {{ blinking_text_rate_ms }},
  text_blink_rate_rapid = {{ rapid_blinking_text_rate_ms }},

  -----------------------------------------------------------------------------
  -- CURSOR
  -----------------------------------------------------------------------------

  default_cursor_style = '{{ cursor_type }}',
  cursor_blink_rate = {{ cursor_blink_rate_ms }},

  -----------------------------------------------------------------------------
  -- COLORS
  -----------------------------------------------------------------------------

  colors = {

    foreground = '{{ wezterm_term_colors.text.fg }}',
    background = '{{ wezterm_term_colors.background.bg }}',
    cursor_bg = '{{ wezterm_term_colors.cursor.bg }}',
    cursor_border = '{{ wezterm_term_colors.cursor.bg }}',
    cursor_fg = '{{ wezterm_term_colors.cursor.fg_text }}',
    ansi = {
      '{{ wezterm_term_colors.black.color0_dimmed }}',
      '{{ wezterm_term_colors.red.color1_dimmed }}',
      '{{ wezterm_term_colors.green.color2_dimmed }}',
      '{{ wezterm_term_colors.yellow.color3_dimmed }}',
      '{{ wezterm_term_colors.blue.color4_dimmed }}',
      '{{ wezterm_term_colors.magenta.color5_dimmed }}',
      '{{ wezterm_term_colors.cyan.color6_dimmed }}',
      '{{ wezterm_term_colors.white.color7_dimmed }}',
    },
    brights = {
      '{{ wezterm_term_colors.black.color8_bright }}',
      '{{ wezterm_term_colors.red.color9_bright }}',
      '{{ wezterm_term_colors.green.color10_bright }}',
      '{{ wezterm_term_colors.yellow.color11_bright }}',
      '{{ wezterm_term_colors.blue.color12_bright }}',
      '{{ wezterm_term_colors.magenta.color13_bright }}',
      '{{ wezterm_term_colors.cyan.color14_bright }}',
      '{{ wezterm_term_colors.white.color15_bright }}',
    },

    selection_fg = '{{ wezterm_term_colors.selection.fg_text }}',
    selection_bg = '{{ wezterm_term_colors.selection.bg }}',

    split = '{{ wezterm_term_colors.pane_split.border }}',

    scrollbar_thumb = '{{ wezterm_term_colors.scrollbar.slider }}',

    visual_bell = '{{ wezterm_term_colors.visual_bell.bg }}',

    tab_bar = {

      background = '{{ wezterm_term_colors.status_area.bg }}',

      active_tab = {
        bg_color = '{{ wezterm_term_colors.status_active_tab.bg }}',
        fg_color = '{{ wezterm_term_colors.status_active_tab.fg_text }}',
        intensity = 'Bold',
      },

      inactive_tab = {
        bg_color = '{{ wezterm_term_colors.status_inactive_tabs.bg }}',
        fg_color = '{{ wezterm_term_colors.status_inactive_tabs.fg_text }}',
        intensity = 'Bold',
      },

    }, -- tab_bar

  }, -- colors

  window_background_opacity = {{ wezterm_term_colors.background.opacity }},

  -----------------------------------------------------------------------------
  -- TABS
  -----------------------------------------------------------------------------

  use_fancy_tab_bar = false,
  tab_bar_at_bottom = {{ tab_bar_on_bottom }},
  show_new_tab_button_in_tab_bar = {{ show_new_tab_button }},

  -----------------------------------------------------------------------------
  -- ALERTS
  -----------------------------------------------------------------------------

  audible_bell = "{{ 'SystemBeep' if audio_bell_enable else 'Disabled' }}",
  visual_bell = {
    fade_in_function = 'EaseIn',
    fade_in_duration_ms = {{ visual_bell_fade_in_out_time_ms }},
    fade_out_function = 'EaseOut',
    fade_out_duration_ms = {{ visual_bell_fade_in_out_time_ms }},
  },

  -----------------------------------------------------------------------------
  -- QUICK-SELECT MODE
  -----------------------------------------------------------------------------

  quick_select_patterns = { "{{ quick_select_search_pattern }}" },
  quick_select_alphabet = "{{ quick_select_hint_keys }}",

  -----------------------------------------------------------------------------
  -- MOUSE
  -----------------------------------------------------------------------------

  alternate_buffer_wheel_scroll_speed = {{ mouse_wheel_term_pager_arrow_presses }},

  -----------------------------------------------------------------------------
  -- KEYMAPS
  -----------------------------------------------------------------------------

  -- clear all existing/default keymaps
  disable_default_key_bindings = true,

  keys = {

    -- Tabs

    { key = '{{ keymap_create_new_tab.key }}', mods = '{{ keymap_create_new_tab.mod }}', action = act.SpawnTab 'CurrentPaneDomain' },
    { key = '{{ keymap_next_tab.key }}', mods = '{{ keymap_next_tab.mod }}', action = act.ActivateTabRelative(1) },
    { key = '{{ keymap_prev_tab.key }}', mods = '{{ keymap_prev_tab.mod }}', action = act.ActivateTabRelative(-1) },
    { key = '{{ keymap_move_tab_right.key }}', mods = '{{ keymap_move_tab_right.mod }}', action = act.MoveTabRelative(1) },
    { key = '{{ keymap_move_tab_left.key }}', mods = '{{ keymap_move_tab_left.mod }}', action = act.MoveTabRelative(-1) },
    { key = '{{ keymap_kill_tab.key }}', mods = '{{ keymap_kill_tab.mod }}', action = act.CloseCurrentTab{ confirm = false } },

    -- Panes

    { key = '{{ keymap_new_horizontal_pane.key }}', mods = '{{ keymap_new_horizontal_pane.mod }}', action = act.SplitVertical{ domain = 'CurrentPaneDomain' } },
    { key = '{{ keymap_new_vertical_pane.key }}', mods = '{{ keymap_new_vertical_pane.mod }}', action = act.SplitHorizontal{ domain = 'CurrentPaneDomain' } },
    { key = '{{ keymap_switch_pane_left.key }}', mods = '{{ keymap_switch_pane_left.mod }}', action = act.ActivatePaneDirection 'Left' },
    { key = '{{ keymap_switch_pane_right.key }}', mods = '{{ keymap_switch_pane_right.mod }}', action = act.ActivatePaneDirection 'Right' },
    { key = '{{ keymap_switch_pane_above.key }}', mods = '{{ keymap_switch_pane_above.mod }}', action = act.ActivatePaneDirection 'Up' },
    { key = '{{ keymap_switch_pane_below.key }}', mods = '{{ keymap_switch_pane_below.mod }}', action = act.ActivatePaneDirection 'Down' },
    { key = '{{ keymap_toggle_pane_fullscreen.key }}', mods = '{{ keymap_toggle_pane_fullscreen.mod }}', action = act.TogglePaneZoomState },

    -- Font Sizes

    { key = '{{ keymap_inc_font_size.key }}', mods = '{{ keymap_inc_font_size.mod }}', action = act.IncreaseFontSize },
    { key = '{{ keymap_dec_font_size.key }}', mods = '{{ keymap_dec_font_size.mod }}', action = act.DecreaseFontSize },
    { key = '{{ keymap_reset_font_size.key }}', mods = '{{ keymap_reset_font_size.mod }}', action = act.ResetFontSize },

    -- Copy/Paste

    { key = '{{ keymap_copy_sel_to_clipboard.key }}', mods = '{{ keymap_copy_sel_to_clipboard.mod }}', action = act.CopyTo 'ClipboardAndPrimarySelection' },
    { key = '{{ keymap_paste_from_clipboard.key }}', mods = '{{ keymap_paste_from_clipboard.mod }}', action = act.PasteFrom 'Clipboard' },

    -- Screen And Scrollback

    { key = '{{ keymap_scrollback_page_up.key }}', mods = '{{ keymap_scrollback_page_up.mod }}', action = act.ScrollByPage(-1) },
    { key = '{{ keymap_scrollback_page_down.key }}', mods = '{{ keymap_scrollback_page_down.mod }}', action = act.ScrollByPage(1) },
    { key = '{{ keymap_scrollback_clear.key }}', mods = '{{ keymap_scrollback_clear.mod }}', action = act.ClearScrollback 'ScrollbackAndViewport' },

    -- Enter Quick-Select Mode

    { key = '{{ keymap_enter_quick_select_mode.key }}', mods = '{{ keymap_enter_quick_select_mode.mod }}', action = act.QuickSelect },

    -- Enter Search Mode

    { key = '{{ keymap_enter_search_mode.key }}', mods = '{{ keymap_enter_search_mode.mod }}', action = act.Search 'CurrentSelectionOrEmptyString' },

    -- Enter Copy Mode

    { key = '{{ keymap_enter_copy_mode.key }}', mods = '{{ keymap_enter_copy_mode.mod }}', action = act.ActivateCopyMode },

  },

  key_tables = {

    -- Keymaps In Search Mode
    search_mode = {
      { key = '{{ keymap_next_search_hit.key }}', mods = '{{ keymap_next_search_hit.mod }}', action = act.CopyMode 'NextMatch' },
      { key = '{{ keymap_prev_search_hit.key }}', mods = '{{ keymap_prev_search_hit.mod }}', action = act.CopyMode 'PriorMatch' },
      { key = '{{ keymap_next_search_page.key }}', mods = '{{ keymap_next_search_page.mod }}', action = act.CopyMode 'NextMatchPage' },
      { key = '{{ keymap_prev_search_page.key }}', mods = '{{ keymap_prev_search_page.mod }}', action = act.CopyMode 'PriorMatchPage' },
      { key = '{{ keymap_cycle_search_type.key }}', mods = '{{ keymap_cycle_search_type.mod }}', action = act.CopyMode 'CycleMatchType' },
      { key = '{{ keymap_enter_search_mode.key }}', mods = '{{ keymap_enter_search_mode.mod }}', action = act.CopyMode 'ClearPattern' },
      { key = '{{ keymap_copy_search_hit_to_clipboard.key }}', mods = '{{ keymap_copy_search_hit_to_clipboard.mod }}', action = act.CopyTo 'ClipboardAndPrimarySelection' },
      { key = '{{ keymap_exit_search_mode.key }}', mods = '{{ keymap_exit_search_mode.mod }}', action = act.CopyMode 'Close' },
    },

    -- Keymaps In Copy Mode
    copy_mode = {
      { key = '{{ keymap_copy_mode_left.key }}', mods = '{{ keymap_copy_mode_left.mod }}', action = act.CopyMode 'MoveLeft' },
      { key = '{{ keymap_copy_mode_right.key }}', mods = '{{ keymap_copy_mode_right.mod }}', action = act.CopyMode 'MoveRight' },
      { key = '{{ keymap_copy_mode_down.key }}', mods = '{{ keymap_copy_mode_down.mod }}', action = act.CopyMode 'MoveDown' },
      { key = '{{ keymap_copy_mode_up.key }}', mods = '{{ keymap_copy_mode_up.mod }}', action = act.CopyMode 'MoveUp' },
      { key = '{{ keymap_copy_mode_next_word_start.key }}', mods = '{{ keymap_copy_mode_next_word_start.mod }}', action = act.CopyMode 'MoveForwardWord' },
      { key = '{{ keymap_copy_mode_prev_word_start.key }}', mods = '{{ keymap_copy_mode_prev_word_start.mod }}', action = act.CopyMode 'MoveBackwardWord' },
      { key = '{{ keymap_copy_mode_line_start.key }}', mods = '{{ keymap_copy_mode_line_start.mod }}', action = act.CopyMode 'MoveToStartOfLine' },
      { key = '{{ keymap_copy_mode_next_line_start.key }}', mods = '{{ keymap_copy_mode_next_line_start.mod }}', action = act.CopyMode 'MoveToStartOfNextLine' },
      { key = '{{ keymap_copy_mode_line_end.key }}', mods = '{{ keymap_copy_mode_line_end.mod }}', action = act.CopyMode 'MoveToEndOfLineContent' },
      { key = '{{ keymap_copy_mode_next_page.key }}', mods = '{{ keymap_copy_mode_next_page.mod }}', action = act.CopyMode 'PageDown' },
      { key = '{{ keymap_copy_mode_prev_page.key }}', mods = '{{ keymap_copy_mode_prev_page.mod }}', action = act.CopyMode 'PageUp' },
      { key = '{{ keymap_copy_mode_screen_top.key }}', mods = '{{ keymap_copy_mode_screen_top.mod }}', action = act.CopyMode 'MoveToViewportTop' },
      { key = '{{ keymap_copy_mode_screen_middle.key }}', mods = '{{ keymap_copy_mode_screen_middle.mod }}', action = act.CopyMode 'MoveToViewportMiddle' },
      { key = '{{ keymap_copy_mode_screen_end.key }}', mods = '{{ keymap_copy_mode_screen_end.mod }}', action = act.CopyMode 'MoveToViewportBottom' },
      { key = '{{ keymap_copy_mode_scrollback_start.key }}', mods = '{{ keymap_copy_mode_scrollback_start.mod }}', action = act.CopyMode 'MoveToScrollbackTop' },
      { key = '{{ keymap_copy_mode_scrollback_end.key }}', mods = '{{ keymap_copy_mode_scrollback_end.mod }}', action = act.CopyMode 'MoveToScrollbackBottom' },
      { key = '{{ keymap_copy_mode_select_chars.key }}', mods = '{{ keymap_copy_mode_select_chars.mod }}', action = act.CopyMode{ SetSelectionMode =  'Cell' } },
      { key = '{{ keymap_copy_mode_select_line.key }}', mods = '{{ keymap_copy_mode_select_line.mod }}', action = act.CopyMode{ SetSelectionMode = 'Line' } },
      { key = '{{ keymap_copy_mode_select_block.key }}', mods = '{{ keymap_copy_mode_select_block.mod }}', action = act.CopyMode{ SetSelectionMode =  'Block' } },
      { key = '{{ keymap_copy_mode_select_goto_ends.key }}', mods = '{{ keymap_copy_mode_select_goto_ends.mod }}', action = act.CopyMode 'MoveToSelectionOtherEnd' },
      { key = '{{ keymap_copy_mode_copy_sel_to_clip.key }}', mods = '{{ keymap_copy_mode_copy_sel_to_clip.mod }}', action = act.Multiple{ { CopyTo =  'ClipboardAndPrimarySelection' }, { CopyMode =  'Close' } } },
      { key = '{{ keymap_copy_mode_exit.key }}', mods = '{{ keymap_copy_mode_exit.mod }}', action = act.CopyMode 'Close' },

    }, -- key_tables

  }, -- keys

  -----------------------------------------------------------------------------
  -- UPDATES
  -----------------------------------------------------------------------------

  -- whether to check for updates to the wezterm application
  check_for_updates = {{ check_for_wezterm_updates }},

} -- return

